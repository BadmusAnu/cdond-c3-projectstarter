version: 2.1

commands:
  destroy_environment:
    description: Destroy Cloud Formation Stacks and infrastructure
    parameters:
      id:
        type: string
    steps:
      - run:
          name: Destroy backend cfn stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
          when: on_fail
      - run:
          name: Destroy frontend cfn stack and S3 bucket
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
          when: on_fail
            

  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      id:
        type: string 
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/NnowyGhYzJyAAsC8uqaBvW/udacity)
            if(( "$SUCCESS" == "success")); 
            then
              cd backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - save_cache:
          paths:
            - "frontend/dist"
          key:  frontend-dist   

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
             cd frontend
             npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: back-end test
          command: |
             cd backend
             npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend scan
          command: |
             cd frontend
             npm i
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend scan
          command: |
             cd backend
             npm i
             npm audit fix --audit-level=critical --force   
            # npm audit --audit-level=critical


  deploy-infrastructure:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"  
            
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend" \
              --output text >> .circleci/ansible/inventory.txt
            
            cat .circleci/ansible/inventory.txt
      
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:5}
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:5}    
          
                  

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["cb:a4:a2:c3:ae:5e:be:7a:bb:5d:bd:ba:74:bf:2f:94"] 
      - attach_workspace:
          at: .
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook -i ./.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:5}
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:5}    
         

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
             cd  backend
             npm run migrations:revert
             npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdB
          command: |
            if grep -q "has been executed successfully" ~/project/backend/migrations_dump.txt
            then
              echo "DB migration was successful, will update kvdb..."
              curl -k https://kvdb.io/NnowyGhYzJyAAsC8uqaBvW/udacity -d 'success'
            else
              echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
              curl -k https://kvdb.io/NnowyGhYzJyAAsC8uqaBvW/udacity -d 'failure'
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:5}"
      
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:5}
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:5}
      

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]      
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople-backend" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: baking-in back-end ip
          command: |            
            cd frontend 
            npm i
            npm run build
            
            
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5}" --recursive
      
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:5}
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:5}    
          
          
      
         
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["cb:a4:a2:c3:ae:5e:be:7a:bb:5d:bd:ba:74:bf:2f:94"] 
      
      - attach_workspace:
          at: .

      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            cat ./.circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ./.circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml --ssh-common-args='-o StrictHostKeyChecking=no'
     
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:5}
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:5}    

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update curl
            pip install awscli
            pip install nodejs
            pip install npm


      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople-backend" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:5}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:5}
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:5}    

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip nodejs npm
      - run:
          name: Update cloudfront distribution
          command: |   
            
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name IntialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:5}" \
              --tags project=udapeople
      
      - persist_to_workspace:
          root: .
          paths:
            - /
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:5}
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:5} 
 
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      
      - attach_workspace:
          at: .
      
      - run:
          name: Update cloudfront distribution
          command: |   

            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:5}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
            
            if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]]
            then
              echo "$OldWorkflowID!=$CurrentWorkflowID => will delete old version"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            else
              echo "$OldWorkflowID==$CurrentWorkflowID => nothing needs to be done..."
            fi
            
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]